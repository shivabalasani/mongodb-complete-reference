Access cureent database         Access the collection       Apply this method                   Range Filter
db.                                 flightData.                 find(                   {distance:      {$gt:    100    }})
                                                                                          Field      Operator     Value
Operators
    - Query & Projection
    - Query Selectors
    - Projection Oprators
    - Update, Field, Arrays
    - Query Modifiers
    - Aggregation, Pipeline Stages, Pipeline Operators

------------------------------------------------------------------------------------------------------------------------
Query Selectors and Projection Operators
mongoimport C:\development\MongoDB\tv-shows.json -d movieData -c movies --jsonArray --drop

//find gives us cursor with first 20 documents. findOne returns one document
db.movies.find({name: "The Last Ship"})
db.movies.find({runtime: {$eq : 60}}).pretty() //equal to
db.movies.find({runtime: {$ne : 60}}).pretty() //not equal
db.movies.find({runtime: {$lt : 60}}).pretty() //lower than
db.movies.find({runtime: {$lte : 42}}).pretty() //lower than or equal to
db.movies.find({runtime: {$gt : 60}}).pretty() //greater than
db.movies.find({runtime: {$gte : 42}}).pretty() //greater than or equal to

Querying embedded fields and arrays
db.movies.find({"rating.average": {$gt : 7}}).pretty()
db.movies.find({genres: "Drama"}).pretty()
db.movies.find({genres: ["Drama"]}).pretty() // for exact equality with only drama as genre


db.movies.find({runtime: {$in:  [30, 42]}}).pretty() //all documents with runtime equal to 30 or 42
db.movies.find({runtime: {$nin:  [30, 42]}}).pretty() //all documents with runtime not equal to 30 or 42

------------------------------------------------------------------------------------------------------------------------
Logical Opererators
db.movies.find({$or: [{"rating.average": {$lt: 5}}, {"rating.average": {$gt: 9.3 }}]}).pretty() //all documents with rating lower than 5 or greater than 9.3
db.movies.find({$nor: [{"rating.average": {$lt: 5}}, {"rating.average": {$gt: 9.3 }}]}).pretty()//all documents with rating not lower than 5 or not greater than 9.3

db.movies.find({$and: [{"rating.average": {$gt: 9}}, {genres: "Drama"}]}).pretty() //all document with rating above 9 and has a Drama in genre
db.movies.find({"rating.average": {$gt: 9}, genres: "Drama"}).count() //same as above

db.movies.find({genres: "Drama", genres: "Horror"}).count() //23 . Does not work in all the drivers so it is better to use $and
db.movies.find({$and: [{genres: "Drama"}, {genres: "Horror"}]}).count() //17. with $and it returns correct results.

db.movies.find({runtime: {$not: { $eq: 60}}}).count() //70. Runtime not equal to 60
db.movies.find({runtime: {$ne : 60}}).count() //70. same as above

------------------------------------------------------------------------------------------------------------------------
Element Operators
db.movies.find({runtime: {$exists: true}}).pretty()
db.movies.find({runtime: {$exists: true, $gt: 7}}).pretty() //all documents in which runtime exists and is greater than 7

db.movies.find({runtime: {$exists: true, $ne: null}}).pretty() //all documents where runtime exists and is not equal to null

db.movies.find({runtime: {$type: ["double", "string"}}).pretty() //all documents where runtime type is a double or a string

------------------------------------------------------------------------------------------------------------------------
Evaluation Operators

db.movies.find({summary: {$regex: /musical/}}).pretty() //regex allows to search for text in a field

use financialData
db.sales.insertMany([{volume: 100, target:120}, {volume: 89, target:80}, {volume: 200, target:177}])
db.sales.find({$expr: {$gt: ["$volume","$target"]}}).pretty() //get all documents where volume value is greater than target field value.

//get all documents where volume is greater than 190 and difference between volume and target should be greater than 10 
db.sales.find({$expr: {$gt: [{$cond: {if: {$gte: ["$volume", 190]}, then: {$subtract: ["$volume", 10]}, else: "$volume"}}, "$target" ]}}).pretty()

------------------------------------------------------------------------------------------------------------------------
mongoimport C:\development\MongoDB\boxoffice.json -d boxOffice -c moviestarts --drop --jsonArray 

//get all documents which has rating greater than 9.2 and runtime less than 100 minutes
db.moviestarts.find({"meta.rating": {$gt: 9.2}, "meta.runtime": {$lt: 100}}).pretty()


db.moviestarts.find({$or: [{genre: "drama"}, {genre: "action"}]}).pretty() //get all movies that have a genre of drama or action
db.moviestarts.find({$and: [{genre: "drama"}, {genre: "action"}]}).pretty() //get all movies that have a genre of drama and action

//all documents where visitors is greater than the expectedVisitors
db.moviestarts.find({$expr: {$gt: ["$visitors", "$expectedVisitors"]} }).pretty() 

------------------------------------------------------------------------------------------------------------------------
Array Operators
db.users.insertOne({name: "Max", hobbies: ["Sports", "Cooking", "Hiking"]})
db.users.insertOne({name: "Anna", hobbies: [{title : "Sports", frequency: 2},{title : "Yoga", frequency: 3}], phone: "433243243234", age: null})

db.users.find({"hobbies.title": "Sports"}).pretty() //querying array data
db.users.find({hobbies : {$size: 3}}).pretty() //all users having only 3 hobbies

use boxOffice
show collections
db.moviestarts.find({genre : ["action", "thriller"]}).pretty() //only returns 1 document which has action and thriller in the same order
db.moviestarts.find({genre : {$all: ["action", "thriller"]}}).pretty() // returns 3 documents without caring about the order

//all document with hobby of sports and frequncy greater than 3
db.users.find({$and: [{"hobbies.title": "Sports"}, {"hobbies.frequency": {$gte: 3}}]}).pretty() //returns incorrect Anna record
db.users.find({hobbies: { $elemMatch: {title: "Sports", frequency: {$gte: 2}}}}).pretty() //returns Anna since it satisfies both conditions

------------------------------------------------------------------------------------------------------------------------
mongoimport C:\development\MongoDB\boxoffice-extended.json -d boxOffice -c exmoviestarts --drop --jsonArray 

//all documents with exactly 2 genres
db.exmoviestarts.find({genre: {$size: 2}}).pretty()

db.exmoviestarts.find({"meta.aired" : 2018}).pretty() //all movies that aired in 2018
db.exmoviestarts.find({ratings: {$elemMatch: {$gt: 8, $lt: 10}}}).pretty() //all movies that has at least one rating greater than 8 but lower than 10

------------------------------------------------------------------------------------------------------------------------
Cursors

use movieData
db.movies.find().count() //240
db.movies.find().next() 
const dataCursor = db.movies.find()
dataCursor.next() //returns the next document
dataCursor  //returns 20 document

dataCursor.forEach(doc => {printjson(doc)}) //returns documents which are not fetched yet.
dataCursor.hasNext() //returns false since we previously retrieved all documents in the collection. check if next document exists 

const cursor = db.movies.find() //creates a new cursor pointing to the first document
cursor.hasNext() //returns true
cursor.next() //returns first document

Sorting cursor results:-
db.movies.find().sort({"rating.average" : -1}).pretty()  //1 means ascending -1 means descending
db.movies.find().sort({"rating.average" : 1, runtime: -1}).pretty() //sort average ratings in ascending and runtime in descending

Skipping and Limiting Cursor results(for Pagination):- MongoDB will sort first then skip and then limit
db.movies.find().sort({"rating.average" : 1, runtime: -1}).skip(10).pretty() //skip 10 documents
db.movies.find().sort({"rating.average" : 1, runtime: -1}).skip(100).limit(10).pretty() // skip 100 and retrieve 10 

------------------------------------------------------------------------------------------------------------------------
Projections to shape our results:-
//all fields which are not mentioned here will not be dispalyed. If we don't want to include id set its value to 0
db.movies.find({},{name: 1, genres: 1, runtime: 1, rating:1, _id: 0}).pretty() 
db.movies.find({},{name: 1, genres: 1, runtime: 1, "schedule.time": 1, _id: 0}).pretty() //only include time field in schedule

db.movies.find({genres: "Drama"}, {"genres.$": 1}).pretty() //return all Drama genres and display only one item in the array
db.movies.find({genres: {$all: ["Drama","Horror"]}}, {"genres.$": 1}).pretty()

db.movies.find({genres: "Drama"}, {genres: {$elemMatch: {$eq: "Horror"}}}).pretty() //retrieve all drama documents and display genres with Horror

db.movies.find({"rating.average": {$gt: 9}}, {genres: {$slice: 2}, name: 1}).pretty() //returns only 2 first two slices of genres
db.movies.find({"rating.average": {$gt: 9}}, {genres: {$slice: [1,2]}, name: 1}).pretty() //skips the first item and returns next two