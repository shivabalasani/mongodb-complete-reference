MongoDB has a couple of hard limits - most importantly, a single document in a collection (including all embedded documents it might have) 
must be <= 16mb. Additionally, you may only have 100 levels of embedded documents.

Text - 16MB
Boolean - true or false
Number - Integer (int32)
       - NumberLong(int64)
       - NumberDecimal(12.99)
ObjectId - ObjectId("sfad")
ISODate - ISODate("2018-09-09")
Timestamp - Timestamp(11231532)
Embedded Document - {"a": {...}}

Important data type limits are:
Normal integers (int32) can hold a maximum value of +-2,147,483,647
Long integers (int64) can hold a maximum value of +-9,223,372,036,854,775,807
Text can be as long as you want - the limit is the 16mb restriction for the overall document

NumberInt creates a int32 value => NumberInt(55)
NumberLong creates a int64 value => NumberLong(7489729384792)

eg:-
db.companies.insertOne({name: "Fresh AppleInc", isStartup: true, employees: 33, funding: 12345678901234567890, details: {ceo: "Mark Super"}, 
tags: [{title: "super"}, {title: "perfect"}], foundingDate: new Date(), insertedAt: new Timestamp()})

 db.companies.findOne()
{
        "_id" : ObjectId("5e2895294e12e004c851c5e1"),
        "name" : "Fresh AppleInc",
        "isStartup" : true,
        "employees" : 33,
        "funding" : 12345678901234567000, //last digits are replaced with 000 because of size limit
        "details" : {
                "ceo" : "Mark Super"
        },
        "tags" : [
                {
                        "title" : "super"
                },
                {
                        "title" : "perfect"
                }
        ],
        "foundingDate" : ISODate("2020-01-22T18:32:09.062Z"),
        "insertedAt" : Timestamp(1579717929, 1)
}

------------------------------------------------------------------------------------------
If you just use a number (e.g. insertOne({a: 1}), this will get added as a normal double into the database. The reason for this is that the shell
is based on JS which only knows float/ double values and doesn't differ between integers and floats.
db.numbers.insertOne({a:1})
db.stats()
{
        "db" : "shop",
        "collections" : 1,
        "views" : 0,
        "objects" : 1,
        "avgObjSize" : 33,
        "dataSize" : 33,         //datasize is 33
        "storageSize" : 20480,
        "numExtents" : 0,
        "indexes" : 1,
        "indexSize" : 20480,
        "scaleFactor" : 1,
        "fsUsedSize" : 208007077888,
        "fsTotalSize" : 253128339456,
        "ok" : 1
}
db.numbers.deleteMany({})
{
        "db" : "shop",
        "collections" : 1,
        "views" : 0,
        "objects" : 0,
        "avgObjSize" : 0,
        "dataSize" : 0,            //datasize is 0
        "storageSize" : 20480,
        "numExtents" : 0,
        "indexes" : 1,
        "indexSize" : 20480,
        "scaleFactor" : 1,
        "fsUsedSize" : 208008904704,
        "fsTotalSize" : 253128339456,
        "ok" : 1
}

db.numbers.insertOne({a:NumberInt(1)})
{
        "db" : "shop",
        "collections" : 1,
        "views" : 0,
        "objects" : 1,
        "avgObjSize" : 29,
        "dataSize" : 29,        //datasize is now 29
        "storageSize" : 24576,
        "numExtents" : 0,
        "indexes" : 1,
        "indexSize" : 24576,
        "scaleFactor" : 1,
        "fsUsedSize" : 208009457664,
        "fsTotalSize" : 253128339456,
        "ok" : 1
}

typeof db.numbers.findOne().a   : number

NumberDecimal creates a high-precision double value => NumberDecimal("12.99") => This can be helpful for cases where you need (many) exact decimal 
places for calculations.