mongoimport C:\development\MongoDB\persons.json -d analytics -c persons --drop --jsonArray 

use analytics
//Filter stage
db.persons.aggregate([{ $match: {gender: "female"} }]).pretty()

-------------------------------------------------------------------------------------------------------------------------------------------------
//Group,Sort stage
db.persons.aggregate([
    { $match: {gender: "female"}},
    { $group: { _id: { state: "$location.state"}, totalPersons: { $sum: 1}}},
    { $sort:  { totalPersons : -1} }
 ]).pretty()

//Get Total number of persons greater than 50 years old and calcuate their average age
db.persons.aggregate([
    { $match: { "dob.age": {$gt: 50}}},
    { $group: { _id: { gender: "$gender"}, numPersons: { $sum: 1}, avgAge: { $avg: "$dob.age"} }},
    { $sort:  { numPersons : -1} }
 ]).pretty()

-------------------------------------------------------------------------------------------------------------------------------------------------
 //Project stage
db.persons.aggregate([
    { $project: {_id: 0, gender: 1, fullName: { $concat: ["$name.first", " ",  "$name.last"]} }}
 ]).pretty()

//Make only first character as upper case in first and last name
db.persons.aggregate([
    { $project: {_id: 0, gender: 1, fullName: { $concat:[ { $toUpper: { $substrCP: ['$name.first', 0 , 1] } }, 
                                                          { $substrCP: ['$name.first', 1 , { $subtract:  [ { $strLenCP: '$name.first' }, 1] } ]},
    
                                                          ' ',  
                                                          { $toUpper: { $substrCP: ['$name.last', 0 , 1] } }, 
                                                          { $substrCP: ['$name.last', 1 , { $subtract:  [{ $strLenCP: '$name.last' }, 1] } ] } ] }}}
 ]).pretty()

-------------------------------------------------------------------------------------------------------------------------------------------------
 //Turning the location into a geoJSON Object
db.persons.aggregate([
    { $project: {_id: 0, name: 1, email: 1, location: { type: 'Point', coordinates: [
        { $convert: {input: '$location.coordinates.longitude', to: "double", onError: 0.0, onNull: 0.0}},
        { $convert: {input: '$location.coordinates.latitude', to: "double", onError: 0.0, onNull: 0.0}},]
    }}},
    { $project: {gender: 1, email: 1, location: 1, fullName: { $concat:[ { $toUpper: { $substrCP: ['$name.first', 0 , 1] } }, 
                                                          { $substrCP: ['$name.first', 1 , { $subtract:  [ { $strLenCP: '$name.first' }, 1] } ]},
    
                                                          ' ',  
                                                          { $toUpper: { $substrCP: ['$name.last', 0 , 1] } }, 
                                                          { $substrCP: ['$name.last', 1 , { $subtract:  [{ $strLenCP: '$name.last' }, 1] } ] } ] }}}
 ]).pretty()

-------------------------------------------------------------------------------------------------------------------------------------------------
 //Transforming the birthdate
db.persons.aggregate([
    { $project: {_id: 0, name: 1, email: 1, birthdate: { $convert: { input: '$dob.date', to: 'date' } }, age: "$dob.age",
      location: { type: 'Point', coordinates: [
        { $convert: {input: '$location.coordinates.longitude', to: "double", onError: 0.0, onNull: 0.0}},
        { $convert: {input: '$location.coordinates.latitude', to: "double", onError: 0.0, onNull: 0.0}},]
    }}},
    { $project: {gender: 1, email: 1, birthdate: 1, age: 1, location: 1, fullName: { $concat:[ { $toUpper: { $substrCP: ['$name.first', 0 , 1] } }, 
                                                          { $substrCP: ['$name.first', 1 , { $subtract:  [ { $strLenCP: '$name.first' }, 1] } ]},
    
                                                          ' ',  
                                                          { $toUpper: { $substrCP: ['$name.last', 0 , 1] } }, 
                                                          { $substrCP: ['$name.last', 1 , { $subtract:  [{ $strLenCP: '$name.last' }, 1] } ] } ] }}}
 ]).pretty()

//Same as above 
db.persons.aggregate([
    { $project: {_id: 0, name: 1, email: 1, birthdate: { $toDate: '$dob.date'}, age: "$dob.age",
      location: { type: 'Point', coordinates: [
        { $convert: {input: '$location.coordinates.longitude', to: "double", onError: 0.0, onNull: 0.0}},
        { $convert: {input: '$location.coordinates.latitude', to: "double", onError: 0.0, onNull: 0.0}},]
    }}},
    { $project: {gender: 1, email: 1, birthdate: 1, age: 1, location: 1, fullName: { $concat:[ { $toUpper: { $substrCP: ['$name.first', 0 , 1] } }, 
                                                          { $substrCP: ['$name.first', 1 , { $subtract:  [ { $strLenCP: '$name.first' }, 1] } ]},
    
                                                          ' ',  
                                                          { $toUpper: { $substrCP: ['$name.last', 0 , 1] } }, 
                                                          { $substrCP: ['$name.last', 1 , { $subtract:  [{ $strLenCP: '$name.last' }, 1] } ] } ] }}}
 ]).pretty()

-------------------------------------------------------------------------------------------------------------------------------------------------
//Get number of person per birth year
//{ "_id" : { "birthYear" : NumberLong(1955) }, "numPersons" : 113 }
db.persons.aggregate([
    { $project: {_id: 0, name: 1, email: 1, birthdate: { $toDate: '$dob.date'}, age: "$dob.age",
      location: { type: 'Point', coordinates: [
        { $convert: {input: '$location.coordinates.longitude', to: "double", onError: 0.0, onNull: 0.0}},
        { $convert: {input: '$location.coordinates.latitude', to: "double", onError: 0.0, onNull: 0.0}},]
    }}},
    { $project: {gender: 1, email: 1, birthdate: 1, age: 1, location: 1, fullName: { $concat:[ { $toUpper: { $substrCP: ['$name.first', 0 , 1] } }, 
                                                          { $substrCP: ['$name.first', 1 , { $subtract:  [ { $strLenCP: '$name.first' }, 1] } ]},
    
                                                          ' ',  
                                                          { $toUpper: { $substrCP: ['$name.last', 0 , 1] } }, 
                                                          { $substrCP: ['$name.last', 1 , { $subtract:  [{ $strLenCP: '$name.last' }, 1] } ] } ] }}},
    { $group: { _id: { birthYear: { $isoWeekYear: "$birthdate" } }, numPersons: { $sum: 1 } } },
    { $sort: { numPersons: -1 } }
 ]).pretty()

 -------------------------------------------------------------------------------------------------------------------------------------------------
 //Pushing elements into newly created arrays 

 db.friends.aggregate([
    {$group : { _id: { age: "$age"}, allHobbies: {$push: "$hobbies"}} }
 ]).pretty()

//$unwind will flatten or pulls out the array elements 
 db.friends.aggregate([
    { $unwind: "$hobbies" }, 
    { $group: { _id: { age: "$age" }, allHobbies: { $push: "$hobbies" } } }
 ]).pretty()

//To remove duplicates use addToSet
db.friends.aggregate([
    { $unwind: "$hobbies" }, 
    { $group: { _id: { age: "$age" }, allHobbies: { $addToSet: "$hobbies" } } }
]).pretty()

// Using projection with arrays
//Start at second element and give me one element in the array. This will give the last elements in the array
db.friends.aggregate([
    { $project: { _id: 0, examScore: { $slice: ["$examScores", 2, 1] } } }
]).pretty()

//Getting the length of an array
db.friends.aggregate([
    { $project: { _id: 0, numScores: { $size: "$examScores" } } }
]).pretty()

//Scores greater than 60 in the examScores array
db.friends.aggregate([
    {
      $project: {
        _id: 0,
        scores: { $filter: { input: '$examScores', as: 'sc', cond: { $gt: ["$$sc.score", 60] } } }
      }
    }
]).pretty()

//Only get the highest examScore in the examScores array
db.friends.aggregate([
    { $unwind: "$examScores" },
    { $project: { _id: 1, name: 1, age: 1, score: "$examScores.score" } },
    { $sort: { score: -1 } },
    { $group: { _id: "$_id", name: { $first: "$name" }, maxScore: { $max: "$score" } } },
    { $sort: { maxScore: -1 } }
]).pretty();

-------------------------------------------------------------------------------------------------------------------------------------------------
//$bucket
db.persons.aggregate([{
      $bucket: {
        groupBy: '$dob.age',
        boundaries: [18, 30, 40, 50, 60, 120],
        output: {
          numPersons: { $sum: 1 },
          averageAge: { $avg: '$dob.age' } }} }]).pretty();

db.persons.aggregate([{
      $bucketAuto: {
        groupBy: '$dob.age',
        buckets: 5,
        output: {
          numPersons: { $sum: 1 },
          averageAge: { $avg: '$dob.age' } }}}]).pretty();

-------------------------------------------------------------------------------------------------------------------------------------------------
// Get 10 oldest men by skipping first 10
db.persons.aggregate([
    { $match: { gender: "male" } },
    { $project: { _id: 0, gender: 1, name: { $concat: ["$name.first", " ", "$name.last"] }, birthdate: { $toDate: "$dob.date" } } },
    { $sort: { birthdate: 1 } },
    { $skip: 10 },
    { $limit: 10 }
  ]).pretty();

-------------------------------------------------------------------------------------------------------------------------------------------------
//Writing pipeline results into a new collection

db.persons.aggregate([
    { $project: {_id: 0, name: 1, email: 1, birthdate: { $toDate: '$dob.date'}, age: "$dob.age",
      location: { type: 'Point', coordinates: [
        { $convert: {input: '$location.coordinates.longitude', to: "double", onError: 0.0, onNull: 0.0}},
        { $convert: {input: '$location.coordinates.latitude', to: "double", onError: 0.0, onNull: 0.0}},]
    }}},
    { $project: {gender: 1, email: 1, birthdate: 1, age: 1, location: 1, fullName: { $concat:[ { $toUpper: { $substrCP: ['$name.first', 0 , 1] } }, 
                                                          { $substrCP: ['$name.first', 1 , { $subtract:  [ { $strLenCP: '$name.first' }, 1] } ]},
    
                                                          ' ',  
                                                          { $toUpper: { $substrCP: ['$name.last', 0 , 1] } }, 
                                                          { $substrCP: ['$name.last', 1 , { $subtract:  [{ $strLenCP: '$name.last' }, 1] } ] } ] }}},
  { $out: "transformedPersons" }
 ]).pretty()

 db.transformedPersons.find().pretty()

-------------------------------------------------------------------------------------------------------------------------------------------------
//$geoNear stage 
 db.transformedPersons.createIndex({location: "2dsphere"})
 db.transformedPersons.aggregate([
    {  $geoNear: {
        near: {
          type: 'Point',
          coordinates: [-18.4, -42.8]
        },
        maxDistance: 1000000, //1000kms
        $limit: 10,
        query: { age: { $gt: 30 } },
        distanceField: "distance"
      }
    }
  ]).pretty();
